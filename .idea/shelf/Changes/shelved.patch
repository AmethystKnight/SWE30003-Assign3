Index: main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from Mediator import Mediator\r\nimport Manager as mg\r\nfrom DatabaseManager import DatabaseHandler\r\nfrom Client import ServerAPI\r\nimport time\r\n\r\nif __name__ == \"__main__\":\r\n    # webserver url\r\n    url = 'http://192.168.20.7:8000/api/endpoint'\r\n\r\n    # Create an instance of the Mediator class\r\n    mediator = Mediator()\r\n\r\n    database_manager = DatabaseHandler(host=\"localhost\",\r\n                                       user=\"user1\",\r\n                                       password=\"password1\",\r\n                                       database=\"Temp\",\r\n                                       name=\"databaseManager\")\r\n\r\n    # Create Manager classes\r\n    OrderManager = mg.OrderManager(mediator, \"orderManager\")\r\n    FOHPortal = mg.FOHManager(mediator, \"FOHPortal\")\r\n    BOHPortal = mg.BOHManager(mediator, \"BOHPortal\")\r\n    BusinessPortal = mg.BusinessPortal(mediator, \"BusinessPortal\")\r\n    webServerClient = ServerAPI(mediator=mediator, url=url, name=\"webServerClient\")\r\n\r\n    # Subscribe to the Mediator\r\n    mediator.add_to_comms(database_manager.name, database_manager)\r\n    mediator.add_to_comms(OrderManager.name, OrderManager)\r\n    mediator.add_to_comms(FOHPortal.name, FOHPortal)\r\n    mediator.add_to_comms(BOHPortal.name, BOHPortal)\r\n    mediator.add_to_comms(BusinessPortal.name, BusinessPortal)\r\n    mediator.add_to_comms(webServerClient.name, webServerClient)\r\n\r\n\r\n\r\n    # Main loop of program\r\n    while True:\r\n        # I think here we should be call OrderManger.Run and it should be responsible for starting the system running.\r\n\r\n        # connect to webserver for updates ##### Make sure webserver is running first\r\n        webServerClient.run()\r\n        mediator.send_messages()\r\n        time.sleep(2)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.py b/main.py
--- a/main.py	(revision a3a44f6a11d16aa52640a8e4ca0b6056f3adc7df)
+++ b/main.py	(date 1715305476864)
@@ -1,44 +1,31 @@
-from Mediator import Mediator
-import Manager as mg
-from DatabaseManager import DatabaseHandler
-from Client import ServerAPI
-import time
+from threading import Lock, Thread
 
-if __name__ == "__main__":
-    # webserver url
-    url = 'http://192.168.20.7:8000/api/endpoint'
 
-    # Create an instance of the Mediator class
-    mediator = Mediator()
+class Singleton:
+    _instance = None
+    _lock: Lock = Lock()
 
-    database_manager = DatabaseHandler(host="localhost",
-                                       user="user1",
-                                       password="password1",
-                                       database="Temp",
-                                       name="databaseManager")
+    def __new__(cls, *args, **kwargs):
+        with cls._lock:
+            if cls._instance is None:
+                # passing python type with singleton
+                cls._instance = super().__new__(cls)
+        # instead of returning a default py obj we return the instance
+        return cls._instance
 
-    # Create Manager classes
-    OrderManager = mg.OrderManager(mediator, "orderManager")
-    FOHPortal = mg.FOHManager(mediator, "FOHPortal")
-    BOHPortal = mg.BOHManager(mediator, "BOHPortal")
-    BusinessPortal = mg.BusinessPortal(mediator, "BusinessPortal")
-    webServerClient = ServerAPI(mediator=mediator, url=url, name="webServerClient")
 
-    # Subscribe to the Mediator
-    mediator.add_to_comms(database_manager.name, database_manager)
-    mediator.add_to_comms(OrderManager.name, OrderManager)
-    mediator.add_to_comms(FOHPortal.name, FOHPortal)
-    mediator.add_to_comms(BOHPortal.name, BOHPortal)
-    mediator.add_to_comms(BusinessPortal.name, BusinessPortal)
-    mediator.add_to_comms(webServerClient.name, webServerClient)
+class Mediator(Singleton):
+    def __init__(self):
+        self.msg = None
 
+    def print_msg(self):
+        print(self.msg)
 
 
-    # Main loop of program
-    while True:
-        # I think here we should be call OrderManger.Run and it should be responsible for starting the system running.
-
-        # connect to webserver for updates ##### Make sure webserver is running first
-        webServerClient.run()
-        mediator.send_messages()
-        time.sleep(2)
+# Test the singleton
+mediator1 = Mediator()
+mediator2 = Mediator()
+mediator1.msg = 'Hi'
+mediator2.msg = 'Its good'
+mediator1.print_msg()  # Output: Its good
+mediator2.print_msg()  # Output: Its good
Index: Microservices/main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Microservices/main.py b/Microservices/main.py
new file mode 100644
--- /dev/null	(date 1715219173056)
+++ b/Microservices/main.py	(date 1715219173056)
@@ -0,0 +1,44 @@
+from Mediator import Mediator
+import Manager as mg
+from DatabaseManager import DatabaseHandler
+from Client import ServerAPI
+import time
+
+if __name__ == "__main__":
+    # webserver url
+    url = 'http://192.168.20.7:8000/api/endpoint'
+
+    # Create an instance of the Mediator class
+    mediator = Mediator()
+
+    database_manager = DatabaseHandler(host="localhost",
+                                       user="user1",
+                                       password="password1",
+                                       database="Temp",
+                                       name="databaseManager")
+
+    # Create Manager classes
+    OrderManager = mg.OrderManager(mediator, "orderManager")
+    FOHPortal = mg.FOHManager(mediator, "FOHPortal")
+    BOHPortal = mg.BOHManager(mediator, "BOHPortal")
+    BusinessPortal = mg.BusinessPortal(mediator, "BusinessPortal")
+    webServerClient = ServerAPI(mediator=mediator, url=url, name="webServerClient")
+
+    # Subscribe to the Mediator
+    mediator.add_to_comms(database_manager.name, database_manager)
+    mediator.add_to_comms(OrderManager.name, OrderManager)
+    mediator.add_to_comms(FOHPortal.name, FOHPortal)
+    mediator.add_to_comms(BOHPortal.name, BOHPortal)
+    mediator.add_to_comms(BusinessPortal.name, BusinessPortal)
+    mediator.add_to_comms(webServerClient.name, webServerClient)
+
+
+
+    # Main loop of program
+    while True:
+        # I think here we should be call OrderManger.Run and it should be responsible for starting the system running.
+
+        # connect to webserver for updates ##### Make sure webserver is running first
+        webServerClient.run()
+        mediator.send_messages()
+        time.sleep(2)
Index: Mediator.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Mediator.py b/Microservices/Mediator.py
rename from Mediator.py
rename to Microservices/Mediator.py
--- a/Mediator.py	(revision a3a44f6a11d16aa52640a8e4ca0b6056f3adc7df)
+++ b/Microservices/Mediator.py	(date 1715319246956)
@@ -1,3 +1,5 @@
+"""Communication based mediator, should inherit from generic mediator
+for thread safety and """
 class Mediator:
     def __init__(self):
         self.comms_list = {}
Index: Manager.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Manager.py b/Microservices/Manager.py
rename from Manager.py
rename to Microservices/Manager.py
--- a/Manager.py	(revision a3a44f6a11d16aa52640a8e4ca0b6056f3adc7df)
+++ b/Microservices/Manager.py	(date 1715317342050)
@@ -1,5 +1,6 @@
 from msg import message
 
+
 class Manager:
     def __init__(self, mediator, name):
         self.mediator = mediator
@@ -21,23 +22,20 @@
             # Handle other cases if needed
             pass
 
-
     def process_data(self):
         print(f"{self.name} has received the following data: \n {self.data}")
 
 
-
-
 ############################################################################
 ########################## CHILD CLASSES BELOW #############################
 ############################################################################
 
 
-
 class FOHManager(Manager):
     def process_data(self):
         print(f"{self.name} has received the following data: \n {self.data}")
 
+
 ############################################################################
 class OrderManager(Manager):
     def process_data(self):
@@ -65,7 +63,8 @@
     def process_data(self):
         print(f"{self.name} has received the following data: \n {self.data}")
 
+
 ############################################################################
 class BusinessPortal(Manager):
     def process_data(self):
-        print(f"{self.name} has received the following data: \n {self.data}")
\ No newline at end of file
+        print(f"{self.name} has received the following data: \n {self.data}")
diff --git a/webserver.py b/Microservices/webserver.py
rename from webserver.py
rename to Microservices/webserver.py
diff --git a/DatabaseManager.py b/Microservices/DatabaseManager.py
rename from DatabaseManager.py
rename to Microservices/DatabaseManager.py
diff --git a/msg.py b/Microservices/msg.py
rename from msg.py
rename to Microservices/msg.py
diff --git a/Client.py b/Microservices/Client.py
rename from Client.py
rename to Microservices/Client.py
